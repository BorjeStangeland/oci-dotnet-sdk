/*
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Oci.LoganalyticsService.Models;

namespace Oci.LoganalyticsService.Requests
{
    /// <example>
    /// Click <a href="https://docs.cloud.oracle.com/en-us/iaas/tools/dot-net-examples/latest/loganalytics/ListLookups.cs.html">here</a> to see an example of how to use ListLookups request.
    /// </example>
    public class ListLookupsRequest : Oci.Common.IOciRequest
    {
        
        /// <value>
        /// The Logging Analytics namespace used for the request.
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "NamespaceName is required.")]
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Path, "namespaceName")]
        public string NamespaceName { get; set; }
        
        ///
        /// <value>
        /// type - possible values are Lookup or Dictionary
        /// </value>
        ///
        public enum TypeEnum {
            [EnumMember(Value = "Lookup")]
            Lookup,
            [EnumMember(Value = "Dictionary")]
            Dictionary
        };

        /// <value>
        /// type - possible values are Lookup or Dictionary
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Type is required.")]
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "type")]
        public System.Nullable<TypeEnum> Type { get; set; }
        
        /// <value>
        /// Search by lookup display name or description.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "lookupDisplayText")]
        public string LookupDisplayText { get; set; }
        
        ///
        /// <value>
        /// Is system param of value (all, custom, sourceUsing)
        /// 
        /// </value>
        ///
        public enum IsSystemEnum {
            [EnumMember(Value = "ALL")]
            All,
            [EnumMember(Value = "CUSTOM")]
            Custom,
            [EnumMember(Value = "BUILT_IN")]
            BuiltIn
        };

        /// <value>
        /// Is system param of value (all, custom, sourceUsing)
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "isSystem")]
        public System.Nullable<IsSystemEnum> IsSystem { get; set; }
        
        ///
        /// <value>
        /// sort by field
        /// </value>
        ///
        public enum SortByEnum {
            [EnumMember(Value = "displayName")]
            DisplayName,
            [EnumMember(Value = "status")]
            Status,
            [EnumMember(Value = "type")]
            Type,
            [EnumMember(Value = "updatedTime")]
            UpdatedTime,
            [EnumMember(Value = "creationType")]
            CreationType
        };

        /// <value>
        /// sort by field
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sortBy")]
        public System.Nullable<SortByEnum> SortBy { get; set; }
        
        ///
        /// <value>
        /// The lookup status used for filtering when fetching a list of lookups.
        /// </value>
        ///
        public enum StatusEnum {
            [EnumMember(Value = "ALL")]
            All,
            [EnumMember(Value = "SUCCESFUL")]
            Succesful,
            [EnumMember(Value = "FAILED")]
            Failed,
            [EnumMember(Value = "INPROGRESS")]
            Inprogress
        };

        /// <value>
        /// The lookup status used for filtering when fetching a list of lookups.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "status")]
        public System.Nullable<StatusEnum> Status { get; set; }
        
        /// <value>
        /// is include items
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "isHideSpecial")]
        public System.Nullable<bool> IsHideSpecial { get; set; }
        
        /// <value>
        /// The maximum number of items to return.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "limit")]
        public System.Nullable<int> Limit { get; set; }
        
        /// <value>
        /// The page token representing the page at which to start retrieving results. This is usually retrieved from a previous list call.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "page")]
        public string Page { get; set; }
        
        ///
        /// <value>
        /// The sort order to use, either ascending (`ASC`) or descending (`DESC`).
        /// 
        /// </value>
        ///
        public enum SortOrderEnum {
            [EnumMember(Value = "ASC")]
            Asc,
            [EnumMember(Value = "DESC")]
            Desc
        };

        /// <value>
        /// The sort order to use, either ascending (`ASC`) or descending (`DESC`).
        /// 
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Query, "sortOrder")]
        public System.Nullable<SortOrderEnum> SortOrder { get; set; }
        
        /// <value>
        /// The client request ID for tracing.
        /// </value>
        [Oci.Common.Http.HttpConverter(Oci.Common.Http.TargetEnum.Header, "opc-request-id")]
        public string OpcRequestId { get; set; }
    }
}
