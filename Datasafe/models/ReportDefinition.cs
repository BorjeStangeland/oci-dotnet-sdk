/*
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatasafeService.Models
{
    /// <summary>
    /// Description of report definition.
    /// </summary>
    public class ReportDefinition 
    {
        
        /// <value>
        /// Name of the report definition.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "DisplayName is required.")]
        [JsonProperty(PropertyName = "displayName")]
        public string DisplayName { get; set; }
        
        /// <value>
        /// The OCID of the report definition.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Id is required.")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }
        
        /// <value>
        /// The OCID of the parent report definition. In the case of seeded report definition, this is same as definition OCID.
        /// </value>
        [JsonProperty(PropertyName = "parentId")]
        public string ParentId { get; set; }
                ///
        /// <value>
        /// Specifies the name of the category that this report belongs to.
        /// </value>
        ///
        public enum CategoryEnum {
            [EnumMember(Value = "CUSTOM_REPORTS")]
            CustomReports,
            [EnumMember(Value = "SUMMARY")]
            Summary,
            [EnumMember(Value = "ACTIVITY_AUDITING")]
            ActivityAuditing
        };

        /// <value>
        /// Specifies the name of the category that this report belongs to.
        /// </value>
        [JsonProperty(PropertyName = "category")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<CategoryEnum> Category { get; set; }
        
        /// <value>
        /// A description of the report definition.
        /// </value>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        
        /// <value>
        /// Specifies the name of a resource that provides data for the report. For example alerts, events.
        /// </value>
        [JsonProperty(PropertyName = "dataSource")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ReportDefinitionDataSource> DataSource { get; set; }
        
        /// <value>
        /// Signifies whether the definition is seeded or user defined. Values can either be 'true' or 'false'.
        /// </value>
        [JsonProperty(PropertyName = "isSeeded")]
        public System.Nullable<bool> IsSeeded { get; set; }
        
        /// <value>
        /// Specifies how the report definitions are ordered in the display.
        /// </value>
        [JsonProperty(PropertyName = "displayOrder")]
        public System.Nullable<int> DisplayOrder { get; set; }
        
        /// <value>
        /// Specifies the time at which the report definition was created.
        /// </value>
        [JsonProperty(PropertyName = "timeCreated")]
        public System.Nullable<System.DateTime> TimeCreated { get; set; }
        
        /// <value>
        /// The date and time of the report definition update in Data Safe.
        /// </value>
        [JsonProperty(PropertyName = "timeUpdated")]
        public System.Nullable<System.DateTime> TimeUpdated { get; set; }
        
        /// <value>
        /// Additional scim filters used to specialize the report.
        /// </value>
        [JsonProperty(PropertyName = "scimFilter")]
        public string ScimFilter { get; set; }
        
        /// <value>
        /// An array of column objects in the order (left to right) displayed in the report. A column object stores all information about a column, including the name displayed on the UI, corresponding field name in the data source, data type of the column, and column visibility (if the column is visible to the user).
        /// </value>
        [JsonProperty(PropertyName = "columnInfo")]
        public System.Collections.Generic.List<Column> ColumnInfo { get; set; }
        
        /// <value>
        /// An array of column filter objects. A column Filter object stores all information about a column filter including field name, an operator, one or more expressions, if the filter is enabled, or if the filter is hidden.
        /// </value>
        [JsonProperty(PropertyName = "columnFilters")]
        public System.Collections.Generic.List<ColumnFilter> ColumnFilters { get; set; }
        
        /// <value>
        /// An array of column sorting objects. Each column sorting object stores the column name to be sorted and if the sorting is in ascending order; sorting is done by the first column in the array, then by the second column in the array, etc.
        /// </value>
        [JsonProperty(PropertyName = "columnSortings")]
        public System.Collections.Generic.List<ColumnSorting> ColumnSortings { get; set; }
        
        /// <value>
        /// An array of report summary objects in the order (left to right)  displayed in the report.  A  report summary object stores all information about summary of report to be displayed, including the name displayed on UI, the display order, corresponding group by and count of values, summary visibility (if the summary is visible to user).
        /// </value>
        [JsonProperty(PropertyName = "summary")]
        public System.Collections.Generic.List<Summary> Summary { get; set; }
        
        /// <value>
        /// The OCID of the compartment containing the report definition.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "CompartmentId is required.")]
        [JsonProperty(PropertyName = "compartmentId")]
        public string CompartmentId { get; set; }
        
        /// <value>
        /// The current state of the report.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "LifecycleState is required.")]
        [JsonProperty(PropertyName = "lifecycleState")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<ReportDefinitionLifecycleState> LifecycleState { get; set; }
        
        /// <value>
        /// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
        /// <br/>
        /// Example: {&quot;Department&quot;: &quot;Finance&quot;}
        /// </value>
        [JsonProperty(PropertyName = "freeformTags")]
        public System.Collections.Generic.Dictionary<string, string> FreeformTags { get; set; }
        
        /// <value>
        /// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm)
        /// <br/>
        /// Example: {&quot;Operations&quot;: {&quot;CostCenter&quot;: &quot;42&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "definedTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> DefinedTags { get; set; }
        
        /// <value>
        /// System tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.
        /// Example: {&quot;orcl-cloud&quot;: {&quot;free-tier-retained&quot;: &quot;true&quot;}}
        /// </value>
        [JsonProperty(PropertyName = "systemTags")]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Object>> SystemTags { get; set; }
        
    }
}
