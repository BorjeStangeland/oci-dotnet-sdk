/*
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// A summary of each role.
    /// </summary>
    public class RoleSummary 
    {
        
        /// <value>
        /// The name of the role granted to the user.
        /// </value>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
                ///
        /// <value>
        /// Indicates whether the role is granted with the ADMIN OPTION (YES) or not (NO).
        /// </value>
        ///
        public enum AdminOptionEnum {
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether the role is granted with the ADMIN OPTION (YES) or not (NO).
        /// </value>
        [JsonProperty(PropertyName = "adminOption")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<AdminOptionEnum> AdminOption { get; set; }
                ///
        /// <value>
        /// Indicates whether the role is granted with the DELEGATE OPTION (YES) or not (NO).
        /// </value>
        ///
        public enum DelegateOptionEnum {
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether the role is granted with the DELEGATE OPTION (YES) or not (NO).
        /// </value>
        [JsonProperty(PropertyName = "delegateOption")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<DelegateOptionEnum> DelegateOption { get; set; }
                ///
        /// <value>
        /// Indicates whether the role is designated as a DEFAULT ROLE for the user (YES) or not (NO).
        /// </value>
        ///
        public enum DefaultRoleEnum {
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether the role is designated as a DEFAULT ROLE for the user (YES) or not (NO).
        /// </value>
        [JsonProperty(PropertyName = "defaultRole")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<DefaultRoleEnum> DefaultRole { get; set; }
                ///
        /// <value>
        /// Indicates how the role was granted. Possible values:
        /// YES if the role is granted commonly (CONTAINER=ALL is used)
        /// NO if the role is granted locally (CONTAINER=ALL is not used)
        /// 
        /// </value>
        ///
        public enum CommonEnum {
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates how the role was granted. Possible values:
        /// YES if the role is granted commonly (CONTAINER=ALL is used)
        /// NO if the role is granted locally (CONTAINER=ALL is not used)
        /// 
        /// </value>
        [JsonProperty(PropertyName = "common")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<CommonEnum> Common { get; set; }
                ///
        /// <value>
        /// Indicates whether the granted role is inherited from another container (YES) or not (NO).
        /// </value>
        ///
        public enum InheritedEnum {
            [EnumMember(Value = "YES")]
            Yes,
            [EnumMember(Value = "NO")]
            No
        };

        /// <value>
        /// Indicates whether the granted role is inherited from another container (YES) or not (NO).
        /// </value>
        [JsonProperty(PropertyName = "inherited")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<InheritedEnum> Inherited { get; set; }
        
    }
}
