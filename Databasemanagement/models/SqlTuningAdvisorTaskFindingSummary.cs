/*
 * Copyright (c) 2020, 2022, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.DatabasemanagementService.Models
{
    /// <summary>
    /// A summary for all the findings of objects in a tuning task that match a given certain filter.
    /// Includes what kind of findings were found, whether benefits were analyzed, and how many benefits can be obtained.
    /// 
    /// </summary>
    public class SqlTuningAdvisorTaskFindingSummary 
    {
        
        /// <value>
        /// Unique identifier of the task. It is not the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SqlTuningAdvisorTaskId is required.")]
        [JsonProperty(PropertyName = "sqlTuningAdvisorTaskId")]
        public System.Nullable<long> SqlTuningAdvisorTaskId { get; set; }
        
        /// <value>
        /// Key of the object to which these recommendations apply.
        /// It is not the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// 
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SqlTuningAdvisorTaskObjectId is required.")]
        [JsonProperty(PropertyName = "sqlTuningAdvisorTaskObjectId")]
        public System.Nullable<long> SqlTuningAdvisorTaskObjectId { get; set; }
        
        /// <value>
        /// Execution id of the analyzed SQL object. It is not the [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm).
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SqlTuningAdvisorTaskObjectExecutionId is required.")]
        [JsonProperty(PropertyName = "sqlTuningAdvisorTaskObjectExecutionId")]
        public System.Nullable<long> SqlTuningAdvisorTaskObjectExecutionId { get; set; }
        
        /// <value>
        /// Text of the SQL statement.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SqlText is required.")]
        [JsonProperty(PropertyName = "sqlText")]
        public string SqlText { get; set; }
        
        /// <value>
        /// Parsing schema of the object.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "ParsingSchema is required.")]
        [JsonProperty(PropertyName = "parsingSchema")]
        public string ParsingSchema { get; set; }
        
        /// <value>
        /// Unique key of this SQL statement
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "SqlKey is required.")]
        [JsonProperty(PropertyName = "sqlKey")]
        public string SqlKey { get; set; }
        
        /// <value>
        /// Time benefit in seconds for the highest-rated finding for this object.
        /// </value>
        [JsonProperty(PropertyName = "dbTimeBenefit")]
        public System.Nullable<float> DbTimeBenefit { get; set; }
        
        /// <value>
        /// The per-execution percentage benefit.
        /// </value>
        [JsonProperty(PropertyName = "perExecutionPercentage")]
        public System.Nullable<int> PerExecutionPercentage { get; set; }
        
        /// <value>
        /// Whether a statistics recommendation was found for this SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "isStatsFindingPresent")]
        public System.Nullable<bool> IsStatsFindingPresent { get; set; }
        
        /// <value>
        /// Whether a SQL Profile recommendation was found for this SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "isSqlProfileFindingPresent")]
        public System.Nullable<bool> IsSqlProfileFindingPresent { get; set; }
        
        /// <value>
        /// Whether a SQL Profile recommendation has been implemented for this SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "isSqlProfileFindingImplemented")]
        public System.Nullable<bool> IsSqlProfileFindingImplemented { get; set; }
        
        /// <value>
        /// Whether an index recommendation was found for this SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "isIndexFindingPresent")]
        public System.Nullable<bool> IsIndexFindingPresent { get; set; }
        
        /// <value>
        /// Whether a restructure SQL recommendation was found for this SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "isRestructureSqlFindingPresent")]
        public System.Nullable<bool> IsRestructureSqlFindingPresent { get; set; }
        
        /// <value>
        /// Whether an alternative execution plan was found for this SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "isAlternativePlanFindingPresent")]
        public System.Nullable<bool> IsAlternativePlanFindingPresent { get; set; }
        
        /// <value>
        /// Whether a miscellaneous finding was found for this SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "isMiscellaneousFindingPresent")]
        public System.Nullable<bool> IsMiscellaneousFindingPresent { get; set; }
        
        /// <value>
        /// Whether there is an error in this SQL statement.
        /// </value>
        [JsonProperty(PropertyName = "isErrorFindingPresent")]
        public System.Nullable<bool> IsErrorFindingPresent { get; set; }
        
        /// <value>
        /// Whether the task timed out.
        /// </value>
        [JsonProperty(PropertyName = "isTimeoutFindingPresent")]
        public System.Nullable<bool> IsTimeoutFindingPresent { get; set; }
        
    }
}
