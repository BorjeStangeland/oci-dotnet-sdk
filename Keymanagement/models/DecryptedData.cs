/*
 * Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

// NOTE: Code generated by OracleSDKGenerator.
// DO NOT EDIT this file manually.


using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace Oci.KeymanagementService.Models
{
    
    public class DecryptedData 
    {
        
        /// <value>
        /// The decrypted data, expressed as a base64-encoded value.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "Plaintext is required.")]
        [JsonProperty(PropertyName = "plaintext")]
        public string Plaintext { get; set; }
        
        /// <value>
        /// Checksum of the decrypted data.
        /// </value>
        /// <remarks>
        /// Required
        /// </remarks>
        [Required(ErrorMessage = "PlaintextChecksum is required.")]
        [JsonProperty(PropertyName = "plaintextChecksum")]
        public string PlaintextChecksum { get; set; }
        
        /// <value>
        /// The OCID of the key used to encrypt the ciphertext.
        /// </value>
        [JsonProperty(PropertyName = "keyId")]
        public string KeyId { get; set; }
        
        /// <value>
        /// The OCID of the keyVersion used to encrypt the ciphertext.
        /// </value>
        [JsonProperty(PropertyName = "keyVersionId")]
        public string KeyVersionId { get; set; }
                ///
        /// <value>
        /// Encryption algorithm to be used while encrypting/decrypting data using a customer key
        /// AES_256_GCM is the supported value AES keys and uses GCM mode of operation
        /// RSA_OAEP_SHA_1 and RSA_OAEP_SHA_256 are supported for RSA keys and use OAEP padding.   
        /// 
        /// </value>
        ///
        public enum EncryptionAlgorithmEnum {
            [EnumMember(Value = "AES_256_GCM")]
            Aes256Gcm,
            [EnumMember(Value = "RSA_OAEP_SHA_1")]
            RsaOaepSha1,
            [EnumMember(Value = "RSA_OAEP_SHA_256")]
            RsaOaepSha256
        };

        /// <value>
        /// Encryption algorithm to be used while encrypting/decrypting data using a customer key
        /// AES_256_GCM is the supported value AES keys and uses GCM mode of operation
        /// RSA_OAEP_SHA_1 and RSA_OAEP_SHA_256 are supported for RSA keys and use OAEP padding.   
        /// 
        /// </value>
        [JsonProperty(PropertyName = "encryptionAlgorithm")]
        [JsonConverter(typeof(StringEnumConverter))]
        public System.Nullable<EncryptionAlgorithmEnum> EncryptionAlgorithm { get; set; }
        
    }
}
